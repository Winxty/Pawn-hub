local MarketplaceService = game:GetService("MarketplaceService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GameName = Instance.new("StringValue")
GameName.Name = "GameName"
GameName.Value = MarketplaceService:GetProductInfo(game.PlaceId).Name
GameName.Parent = game.Workspace



local DisplayName = game.Players.LocalPlayer.DisplayName
print("Display found")
print(DisplayName)


local PlayerName = game.Players.LocalPlayer.Name
print("User found")
print(PlayerName)





local safe = game.Workspace:FindFirstChild("Safepart")

local function safepart()

    

    if safe then

        print("Safe part already exists, skipping creation")
        wait(0.1)

    
    else

        print("Safe part does not exist, creating Safe part")
        local safe = Instance.new("Part")
        safe.Name = "Safepart"
        safe.Size = Vector3.new(50, 10, 50)
        safe.Color = Color3.fromRGB(155, 155, 155)
        safe.Position = Vector3.new(-16, 10000, -243)
        safe.Anchored = true
        safe.CanCollide = true
        safe.Transparency = 0
        safe.Parent = game.Workspace
        print("Safe part created")

    end

end



safepart()
















local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Pawn Script [Free]",
    SubTitle = GameName.Value,
    TabWidth = 130,
    Size = UDim2.fromOffset(700, 520),
    Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.K -- Used when theres no MinimizeKeybind
})

-- Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Home", Icon = "play" }),
    Player = Window:AddTab({ Title = "Player", Icon = "person-standing" }),
    Teleports = Window:AddTab({ Title = "Teleports", Icon = "mountain" }),
    ESP = Window:AddTab({ Title = "ESP", Icon = "eye" }),
    Host = Window:AddTab({ Title = "Host", Icon = "text" }),
    Misc = Window:AddTab({ Title = "Miscellaneous", Icon = "shuffle" }),
    Devt = Window:AddTab({ Title = "Developer", Icon = "hammer" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })

}

;local bb=game:service'VirtualUser'
game:service'Players'.LocalPlayer.Idled:connect(function()
bb:CaptureController()bb:ClickButton2(Vector2.new())
ab.Text="Roblox tried kicking you buy I didnt let them!"wait(2)ab.Text="Status : Active"wait(0.1)print("Blocked kick: Roblox afk kick")wait(0.1)end)


local Options = Fluent.Options

do





-- << Main tab >> --

Fluent:Notify({
        Title = "Pawn Is Loading",
        Content = "This Wont Take Long",
        SubContent = "➡",
        Duration = 5
})




Tabs.Main:AddParagraph({
    Title = "Welcome " .. DisplayName .. "!",
    Content = "User: " .. PlayerName,
})

Tabs.Main:AddParagraph({
    Title = "Changelog",
    Content = "Added a key system!!!!\nThis is also just a test so far so key will get changed\nKey is WeArePawniesForeal 😭🙏"
})


local Section = Tabs.Main:AddSection("Main")







local DEVUNLOCKCODE = "WeArePawniesForeal"

function GetDev()

    Tabs.Devt:AddParagraph({
        Title = "Welcome Dev!",
        Content = "I made a key system for the keys lol\nHope yall like it"
    })




local Section = Tabs.Devt:AddSection("Dev")





local safestatus = false

local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
local player = game.Players.LocalPlayer

Tabs.Devt:AddButton({
    Title = "Debug",
    Description = "",
    Callback = function()
        -- Recalculate Safe Part status
        local safepartExists = game.Workspace:FindFirstChild("Safepart") ~= nil
        safestatus = safepartExists

        -- Recalculate house ownership
        local ownsHouse = false
        local plotsFolder = game.Workspace:FindFirstChild("Plots")

        if plotsFolder then
            for _, plot in ipairs(plotsFolder:GetChildren()) do
                for _, child in ipairs(plot:GetChildren()) do
                    if child:IsA("Model") and child:GetAttribute("Owner") == player.Name then
                        ownsHouse = true
                    end
                end
            end
        end

        -- Get in-game age
        local ingameage = nil
        local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()

        if char then
            ingameage = char:GetAttribute("Age") -- Directly store the attribute value
        end

        -- Get Server Admin status
        local servAdmin = nil
        local player = game.Players.LocalPlayer

        if player then
            servAdmin = player:GetAttribute("ServerOwner") -- Directly store the attribute value
        end

        -- Print updated values
        print("Character Position: ", char:GetPivot())
        print("Safe part? = " .. tostring(safestatus))
        print("Owns House? = " .. tostring(ownsHouse))
        print("Age? = " .. tostring(ingameage))
        print("Server Admin? = " .. tostring(servAdmin))

        Fluent:Notify({
            Title = "Debugged",
            Content = "Check Dev console for debug info",
            SubContent = "", -- Optional
            Duration = 5 -- Set to nil to make the notification not disappear
    })


    end

})







    local Section = Tabs.Devt:AddSection("Infinite Yield")

    Tabs.Devt:AddButton({
        Title = "Load Infinite Yield",
        Description = "",
        Callback = function()
            loadstring(game:HttpGet(('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'),true))()
        end
    })










    
end




function LockKeySystem()

    local letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+-=[]{}|;:',.<>?/ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρστυφχψωАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЫЭЮЯабвгдеёжзийклмнопрстуфхцчшщыэюяأبجد هوز حطي كلمن سعفص قرست ثخذ ضظغאבגדהוזחטיכלמנסעפצקרשׁת你好世界人们我爱你アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲんあいうえおかきくけこさしすせそたちつてとなにぬねのはひふへほまみむめもやゆよらりるれろわをん가나다라마바사아자차카타파하กขคฆงจฉชซฌญฎฏฐฑฒนบปผฝพฟภมยรลวศษสหฬอฮabcdefghijklmnopqrstuvwxyzáàảãạấầẩẫạăắằẳẵặâấầẩẫặeéèẻẽẹêếềểễệiíìỉĩịòóỏõọôốồổỗộơớờởỡợuúùủũụôốồổỗộơớờởỡợcảàảãạơớờởỡợuúùủũụêếềểễệiíìỉĩịyýỳỷỹỵ"

    local length = math.random(10, 15)
    local randomString = ""

    -- Build the random string
    for i = 1, length do
        local randomIndex = math.random(1, #letters)
        randomString = randomString .. letters:sub(randomIndex, randomIndex)
    end

    -- Check if DEVUNLOCKCODE is correct, then set it to randomString
    if DEVUNLOCKCODE == "WeArePawniesForeal" then
        DEVUNLOCKCODE = randomString
    end

    -- Print the random string (for testing purposes)
    print("Random String: " .. randomString)
    

end








local Input = Tabs.Devt:AddInput("Input", {
    Title = "Dev Key",
    Description = "",
    Default = "None",
    Placeholder = "Placeholder",
    Numeric = false, -- Only allows numbers
    Finished = false, -- Only calls callback when you press enter
    Callback = function(Key)
        
        if Key == DEVUNLOCKCODE then
            print("Dev Unlocked")
            LockKeySystem()
            GetDev()
        else
            
        end

    end
})


-- << Player tab >> --



local character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()


local Toggle = Tabs.Player:AddToggle("MyToggle", 
{
    Title = "Freeze Character", 
    Description = "",
    Default = false,
    Callback = function(state)
	if state then

        if character then
            character:FindFirstChild("Humanoid").RootPart.Anchored = true
        end
	    
	else

        if character then
            character:FindFirstChild("Humanoid").RootPart.Anchored = false
	    
        end
    end 
end
})


local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()

-- Function to update the Character reference
local function UpdateCharacter()
    Character = Player.Character or Player.CharacterAdded:Wait()
end

-- Listen for respawn and update Character
Player.CharacterAdded:Connect(UpdateCharacter)




-- Slider
local Slider = Tabs.Player:AddSlider("Slider", {
    Title = "WalkSpeed",
    Description = "",
    Default = 16,
    Min = 16,
    Max = 500,
    Rounding = 1,
    Callback = function(Value)
        if Character and Character:FindFirstChild("Humanoid") then
            Character.Humanoid.WalkSpeed = Value
        end
    end
})


    
Tabs.Player:AddButton({
        Title = "Infinite jump",
        Description = "Lets you jump infintely what else",
        Callback = function()


    --Toggles the infinite jump between on or off on every script run
_G.infinjump = not _G.infinjump

if _G.infinJumpStarted == nil then
	--Ensures this only runs once to save resources
	_G.infinJumpStarted = true
	

	--The actual infinite jump
	local plr = game:GetService('Players').LocalPlayer
	local m = plr:GetMouse()
	m.KeyDown:connect(function(k)
		if _G.infinjump then
			if k:byte() == 32 then
			humanoid = game:GetService'Players'.LocalPlayer.Character:FindFirstChildOfClass('Humanoid')
			humanoid:ChangeState('Jumping')
			wait()
			humanoid:ChangeState('Seated')
			end
		end
	end)
end
                
        end
    })
    

 
    local Section = Tabs.Player:AddSection("Avatar/Nametags")

    local playerchar = game:GetService("Players").LocalPlayer.Character

    local Toggle = Tabs.Player:AddToggle("MyToggle", 
{
    Title = "Become dev 🤯🤯🤯", 
    Description = "People who aint dumb will know",
    Default = false,
    Callback = function(state)
	if state then

        if playerchar then
            
            playerchar:WaitForChild("NameTag").Dev.Visible = true

        end
	    
	else
        if playerchar then
            
            playerchar:WaitForChild("NameTag").Dev.Visible = false

        end
    end 
end
})







local playerchar = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
local Role = playerchar:WaitForChild("NameTag").Role

Role.Text = "Pawned"

local ActiveRole = true

local Input = Tabs.Player:AddInput("Input", {
    Title = "Custom Role",
    Description = "Client sided duh",
    Default = "Pawned",
    Placeholder = "Placeholder",
    Numeric = false, -- Only allows numbers
    Finished = false, -- Calls callback while typing
    Callback = function(Rolee)
        -- Update the role while typing
        Role.Text = Rolee
    end
})

-- Ensure Input exists before connecting the event
if Input and Input.TextBox then
    Input.TextBox:GetPropertyChangedSignal("Text"):Connect(function()
        -- Update the role while typing
        Role.Text = Input.TextBox.Text
    end)
end



local Colorpicker = Tabs.Player:AddColorpicker("Colorpicker", {
    Title = "Role Color",
    Description = "",
    Default = Color3.fromRGB(255, 226, 80)
})

Colorpicker:OnChanged(function()
    
    wait(0.1)
    Role.TextColor3 = Colorpicker.Value

end)




local Section = Tabs.Player:AddSection("Name Presets")

local namepresets = {} -- Stores custom names
local cname = game.Players.LocalPlayer.PlayerGui:WaitForChild("Gui").AvatarEditor:WaitForChild("Menus").Age.Info.RPName.Input

-- Function to save a new preset
local function SavePreset(name)
    if name ~= "" and not table.find(namepresets, name) then
        table.insert(namepresets, name)
        print("Saved Preset: " .. name)
    end
end

-- Function to remove a preset
local function RemovePreset(name)
    for i, v in ipairs(namepresets) do
        if v == name then
            table.remove(namepresets, i)
            print("Removed Preset: " .. name)
            return
        end
    end
end

-- Function to load a preset by selection
local function LoadPreset(selectedName)
    if selectedName then
        cname.Text = selectedName
        print("Loaded Preset: " .. selectedName)
    end
end

-- Button to save the current name as a preset
Tabs.Player:AddButton({
    Title = "Save Current Name",
    Description = "",
    Callback = function()
        SavePreset(cname.Text)
    end
})

-- Dropdown to select a saved preset
local PresetDropdown = Tabs.Player:AddDropdown("Load Preset", {
    Title = "Select a Preset",
    Description = "Presets are pasted into the name input, so press apply changes.",
    Values = namepresets,
    Multi = false,
    Callback = function(selectedName)
        LoadPreset(selectedName)
    end
})

-- Button to remove a selected preset
Tabs.Player:AddButton({
    Title = "Remove Selected Preset",
    Description = "",
    Callback = function()
        local selectedName = PresetDropdown.Value
        if selectedName then
            RemovePreset(selectedName)
            PresetDropdown:SetValues(namepresets) -- Update dropdown list
        end
    end
})

-- Button to refresh dropdown (in case new presets are added)
Tabs.Player:AddButton({
    Title = "Refresh Presets",
    Description = "Use when new presets are added or removed.",
    Callback = function()
        PresetDropdown:SetValues(namepresets) -- Update dropdown with new presets
    end
})









local Section = Tabs.Player:AddSection("Misc")


local characterList = {"★", "《  》", "「 」", "【 】", "°", "☉", "†", "ˁ ˀ", "∙", "₍ ₎", "♀", "♂", "♡"}

local CC = characterList[1] -- Default character

local Dropdown = Tabs.Player:AddDropdown("Dropdown", {
    Title = "Dropdown",
    Description = "Dropdown description",
    Values = characterList,
    Multi = false,
    Default = 1,

    Callback = function(selectedValue)
        if type(selectedValue) == "number" then
            CC = characterList[selectedValue]
        else
            CC = selectedValue
        end
    end
})


Tabs.Player:AddButton({
    Title = "Copy Characters",
    Description = "",
    Callback = function()
        setclipboard(CC)
        
    end
})

Tabs.Player:AddParagraph({
    Title = "If Character Didnt Copy",
    Content = "If the character didnt copy and you got for example â˜…\nGo into the name editor tab\nThen use the copy v2 down below\nThe character will be pasted inside the name editor\nThen you can copy it from there"
})

local cname = game.Players.LocalPlayer.PlayerGui:WaitForChild("Gui").AvatarEditor:WaitForChild("Menus").Age.Info.RPName.Input

Tabs.Player:AddButton({
    Title = "Copy Characters v2",
    Description = "",
    Callback = function()
        print("Current Name: " .. cname.Text .. " | New Name: " .. cname.Text .. CC)
        cname.Text = cname.Text .. CC  -- Fix: Use cname.Text instead of cname
    end
})












-- << Teleports Tab >> --

Tabs.Teleports:AddButton({
    Title = "Teleport to spawn",
    Description = "",
    Callback = function()

game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-16.3268, 10.6865, -243.0754)

    end
})








Tabs.Teleports:AddButton({
    Title = "Teleport to safe",
    Description = "Can be used for changing avatars privately",
    Callback = function()



        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-16, 10010, -243)

    end
})















local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local Dropdown
local function updatePlayerDropdown()
    local players = {"None"} -- Add "None" as the first option
    for _, p in pairs(game.Players:GetPlayers()) do
        if p ~= player then -- Exclude the local player
            table.insert(players, p.Name)
        end
    end

    if Dropdown then
        Dropdown.Values = players
        Dropdown:SetValue("None") -- Default to "None"
    end
end

Dropdown = Tabs.Teleports:AddDropdown("TeleportToPlayerDropdown", {
    Title = "Teleport to Player",
    Values = {}, -- Start empty
    Multi = false,
})

Dropdown:OnChanged(function(playerName)
    if playerName == "None" then
        
        -- Optionally teleport to current position
        -- character:SetPrimaryPartCFrame(character.PrimaryPart.CFrame)
    elseif playerName and playerName ~= "" then
        local targetPlayer = game.Players:FindFirstChild(playerName)
        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            character:SetPrimaryPartCFrame(targetPlayer.Character.HumanoidRootPart.CFrame)
            Dropdown:SetValue("None")
        else
            
        end
    else
        
    end
end)

game.Players.PlayerAdded:Connect(updatePlayerDropdown)
game.Players.PlayerRemoving:Connect(updatePlayerDropdown)

updatePlayerDropdown()





local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

-- Define teleport locations
local Locations = {
    
    ["Apartments"] = CFrame.new(-735.5060424804688, 10.436481475830078, -160.55471801757812),
    ["HighSchool"] = CFrame.new(-35.650142669677734, 17.039472579956055, 561.9757080078125),
    ["Houses"] = CFrame.new(1782.6614, 11.0817, 125.5293),
    ["Airport"] = CFrame.new(587.700927734375, 32.32146453857422, 1976.94384765625),
    ["Bakery"] = CFrame.new(180.98008728027344, 13.468881607055664, -98.25546264648438),
    ["Bank"] = CFrame.new(431.1841735839844, 35.123748779296875, 938.9663696289062),
    ["Coffe House"] = CFrame.new(-250.42315673828125, 12.90301513671875, -41.54947280883789),
    ["Daycare"] = CFrame.new(483.3843688964844, 13.374637603759766, 639.9404296875),
    ["Fire Station"] = CFrame.new(305.3366394042969, 31.827478408813477, 949.3425903320312),
    ["Gas Station"] = CFrame.new(271.9364013671875, 12.90301513671875, 297.0307312011719),
    ["Grocery Store"] = CFrame.new(557.4177856445312, 12.350186347961426, 335.7955017089844),
    ["Police Station"] = CFrame.new(-984.3167114257812, 40.46616744995117, 494.6744689941406),
    ["Nail Salon"] = CFrame.new(0.36734867095947266, 13.468881607055664, -70.80908203125),
    ["Hair Salon"] = CFrame.new(127.31651306152344, 13.468881607055664, -98.25546264648438),
    ["Beach"] = CFrame.new(-216.66650390625, 12.350186347961426, -343.3359069824219),
    ["Hospital"] = CFrame.new(-751.1329956054688, 35.645782470703125, 263.1784362792969),
    ["MidnightClub"] = CFrame.new(-11.722695350646973, 12.90301513671875, 71.30685424804688)
}

-- Instant teleport function
function Tweentp(location)
    local destination = Locations[location]
    if hrp and destination then
        hrp.CFrame = destination
    else
        warn("Invalid location!")
    end
end

-- Create dropdown for locations
local Dropdown = Tabs.Teleports:AddDropdown("TeleportDropdown", {
    Title = "Teleport to Location",
    Values = {
        "Airport", "Apartments", "Bakery", "Bank", "Beach", "Coffe House", "Daycare", "Fire Station", "Gas Station", "Grocery Store", "Hair Salon", "HighSchool", "Hospital", "Houses", "MidnightClub", "Nail Salon", "Police Station"},
    Multi = false,
    Default = "None",
    Callback = function(selectedLocation)
        if selectedLocation ~= "None" then
            Tweentp(selectedLocation)
            Dropdown:SetValue("None")
        end
    end
})










    



-- << ESP tab >> --

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ESP_Enabled = false  -- Default off
local ESP_Color = Color3.fromRGB(231, 155, 219) -- Default color

-- Add Fluent Color Picker
local Colorpicker = Tabs.ESP:AddColorpicker("Colorpicker", {
    Title = "ESP Color",
    Description = "",
    Default = ESP_Color
})

Colorpicker:OnChanged(function(newColor)
    ESP_Color = newColor  -- Update ESP color
    
    -- Update all ESP highlights with new color
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local highlight = player.Character:FindFirstChild("ESP_Highlight")
            if highlight then
                highlight.FillColor = ESP_Color
                highlight.OutlineColor = ESP_Color
            end
        end
    end
end)

-- Function to create ESP
local function addESP(player)
    if player ~= LocalPlayer then
        player.CharacterAdded:Connect(function(character)
            task.wait(0.5) -- Ensure the character loads
            local highlight = character:FindFirstChild("ESP_Highlight")
            
            if not highlight then
                highlight = Instance.new("Highlight")
                highlight.Name = "ESP_Highlight"
                highlight.Parent = character
                highlight.Adornee = character
            end
            
            highlight.FillColor = ESP_Color
            highlight.OutlineColor = ESP_Color
            highlight.FillTransparency = 0.5
            highlight.OutlineTransparency = 0
            highlight.Enabled = ESP_Enabled
        end)
    end
end

-- Function to toggle ESP
local function toggleESP(state)
    ESP_Enabled = state

    -- Update ESP for all players
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local highlight = player.Character:FindFirstChild("ESP_Highlight")
            if highlight then
                highlight.Enabled = ESP_Enabled
            else
                addESP(player)
            end
        end
    end
end

-- Hook into player joining
Players.PlayerAdded:Connect(addESP)

-- Add Fluent Toggle
local Toggle = Tabs.ESP:AddToggle("ESP_Toggle", {
    Title = "ESP Players",
    Description = "",
    Default = false,
    Callback = function(state)
        toggleESP(state)
    end
})



-- << Host tab >> --

local TextChatService = game:GetService("TextChatService")

local function SendChatMessage(message)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        local textChannel = TextChatService.TextChannels:FindFirstChild("RBXGeneral")
        if textChannel then
            textChannel:SendAsync(message)
        else
            warn("Text channel RBXGeneral not found")
        end
    else
        local chatEvent = game:GetService("ReplicatedStorage"):FindFirstChild("DefaultChatSystemChatEvents")
        if chatEvent then
            chatEvent.SayMessageRequest:FireServer(message, "All")
        else
            warn("DefaultChatSystemChatEvents not found")
        end
    end
end






local WaitTime = 15  -- Default loop delay (seconds)
local message = nil  -- Default message
local issending = false  -- Declare variable outside to manage state

-- Slider for adjusting loop delay
local Slider = Tabs.Host:AddSlider("Slider", {
    Title = "Loop Delay",
    Description = "Time between each sent message in seconds.",
    Default = WaitTime,
    Min = 5,
    Max = 50,
    Rounding = 1,
    Callback = function(Value)
        WaitTime = Value
    end
})

-- Input for custom message
local Input = Tabs.Host:AddInput("Input", {
    Title = "Send Host Message.",
    Description = "",
    Default = message,
    Placeholder = "",
    Numeric = false,
    Finished = false,
    Callback = function(inputMessage)
        message = inputMessage  -- Update the message variable with custom input
    end
})

-- Preset messages
local Prestets = {
    ["HighSchool"] = "Join Our HighSchool Rp Now!",
    ["Family"] = "Join Our Family Rp Now!",
}

-- Dropdown for selecting preset message
local Dropdown = Tabs.Host:AddDropdown("Dropdown", {
    Title = "Presets",
    Description = "Select a preset message.",
    Values = {"HighSchool", "Family"},
    Multi = false,
    Default = 1,
    Callback = function(selectedPreset)
        if selectedPreset ~= "None" then
            message = Prestets[selectedPreset]  -- Update message with the selected preset
        end
    end
})


Tabs.Host:AddButton({
    Title = "Send Message Once",
    Description = "",
    Callback = function()
        SendChatMessage(message)
    end
})



local Toggle = Tabs.Host:AddToggle("MyToggle", {
    Title = "Loop Send Message", 
    Description = "Toggle to loop the message send.",
    Default = false,
    Callback = function(state)
        if state then
            
            issending = true
            while issending do
                SendChatMessage(message)
                wait(WaitTime)
            end
        else
            
            issending = false
        end
    end 
})












-- << Misc tab >> --


local Section = Tabs.Misc:AddSection("Game")

local player = game.Players.LocalPlayer
local humanoid = player.Character.Humanoid
local currentppos







    




local Section = Tabs.Misc:AddSection("Pawn")

Tabs.Misc:AddButton({
    Title = "Destroy Pawn",
    Description = "Destroys the pawn script",
    Callback = function()
        Window:Dialog({
            Title = "Are you sure?",
            Content = "This Window Will Not Be Able To Be Opened Again",
            Buttons = {
                { 
                    Title = "Yes",
                    Callback = function()
                        Role.Text = "Criminal"
                        Role.TextColor3 = Color3.fromRGB(255, 226, 79)
                        warn("Killing Pawn...")
                        Fluent:Destroy()
                    end 
                },
                {
                    Title = "No",
                    Callback = function()
                        print("Cancelling Destroy")
                    end 
                }
            }
        })  
    end
})



    -- Hand the library over to our managers
    SaveManager:SetLibrary(Fluent)
    InterfaceManager:SetLibrary(Fluent)

    -- Ignore keys that are used by ThemeManager.
    -- (we don't want configs to save themes, do we?)
    SaveManager:IgnoreThemeSettings()

    -- You can add indexes of elements the save manager should ignore
    SaveManager:SetIgnoreIndexes({})

    -- Interface manager and save manager folder setup
    InterfaceManager:SetFolder("FluentScriptHub")
    SaveManager:SetFolder("FluentScriptHub/specific-game")

    InterfaceManager:BuildInterfaceSection(Tabs.Settings)
    SaveManager:BuildConfigSection(Tabs.Settings)

    -- Select the first tab by default
    Window:SelectTab(1)

    Fluent:Notify({
        Title = "Pawn",
        Content = "The Script Was Loaded With No Errors!",
        Duration = 8
    })

    -- Use SaveManager to load an auto-loaded config
    SaveManager:LoadAutoloadConfig()
end
