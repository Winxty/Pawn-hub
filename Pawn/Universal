local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Universal " .. Fluent.Version,
    SubTitle = "By Pawn team",
    TabWidth = 130,
    Size = UDim2.fromOffset(700, 520),
    Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.K -- Used when theres no MinimizeKeybind
})

-- Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "play" }),
    Player = Window:AddTab({ Title = "Universal", Icon = "person-standing" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

;local bb=game:service'VirtualUser'
game:service'Players'.LocalPlayer.Idled:connect(function()
bb:CaptureController()bb:ClickButton2(Vector2.new())
ab.Text="Roblox tried kicking you buy I didnt let them!"wait(2)ab.Text="Status : Active"end)

local Options = Fluent.Options

do





-- << Main tab >> --

Fluent:Notify({
        Title = "Pawn Is Loading",
        Content = "This Wont Take Long",
        SubContent = "➡",
        Duration = 5
})


local Section = Tabs.Player:AddSection("Player")

    
local MarketplaceService = game:GetService("MarketplaceService")
local GameName = Instance.new("StringValue")
GameName.Name = "GameName"
GameName.Value = MarketplaceService:GetProductInfo(game.PlaceId).Name
GameName.Parent = game.Workspace



local DisplayName = game.Players.LocalPlayer.DisplayName
print("Display found")
print(DisplayName)


local PlayerName = game.Players.LocalPlayer.Name
print("User found")
print(PlayerName)

Tabs.Main:AddParagraph({
    Title = "Game Found!",
    Content = GameName.Value,
})


Tabs.Main:AddParagraph({
    Title = "Welcome To Pawn Hub " .. DisplayName .. "!",
    Content = "User: " .. PlayerName,
})

Tabs.Main:AddParagraph({
    Title = "Changelog",
    Content = "Added Gui."
})


-- << Player tab >> --


local IsSpeedy = false
local RunService = game:GetService("RunService")
local HeartbeatConnection

local Slider = Tabs.Player:AddSlider("Slider", {
    Title = "WalkSpeed",
    Description = "This Makes You Go Wroom",
    Default = 16,
    Min = 16,
    Max = 1000,
    Rounding = 1,
    Callback = function(Value)
        IsSpeedy = true

        -- Disconnect any existing Heartbeat connection to avoid duplicates
        if HeartbeatConnection then
            HeartbeatConnection:Disconnect()
        end

        -- Connect to Heartbeat for smooth updates
        HeartbeatConnection = RunService.Heartbeat:Connect(function()
            if not IsSpeedy then
                if HeartbeatConnection then
                    HeartbeatConnection:Disconnect()
                end
                return
            end

            local character = game.Players.LocalPlayer.Character
            if character and character:FindFirstChild("Humanoid") then
                character.Humanoid.WalkSpeed = Value
            end
        end)
    end
})

local IsJumpy = false
local RunService = game:GetService("RunService")
local HeartbeatConnection

local Slider = Tabs.Player:AddSlider("Slider", {
    Title = "JumpPower",
    Description = "Boing",
    Default = 50,
    Min = 50,
    Max = 1000,
    Rounding = 1,
    Callback = function(Value)
        IsJumpy = true

        -- Disconnect any existing Heartbeat connection to avoid duplicates
        if HeartbeatConnection then
            HeartbeatConnection:Disconnect()
        end

        -- Connect to Heartbeat for smooth updates
        HeartbeatConnection = RunService.Heartbeat:Connect(function()
            if not IsJumpy then
                if HeartbeatConnection then
                    HeartbeatConnection:Disconnect()
                end
                return
            end

            local character = game.Players.LocalPlayer.Character
            if character and character:FindFirstChild("Humanoid") then
                character.Humanoid.JumpPower = Value
		character.Humanoid.JumpHeight = Value
            end
        end)
    end
})



    
Tabs.Player:AddButton({
        Title = "Infinite jump",
        Description = "Lets you jump infintely what else",
        Callback = function()


    --Toggles the infinite jump between on or off on every script run
_G.infinjump = not _G.infinjump

if _G.infinJumpStarted == nil then
	--Ensures this only runs once to save resources
	_G.infinJumpStarted = true

	--The actual infinite jump
	local plr = game:GetService('Players').LocalPlayer
	local m = plr:GetMouse()
	m.KeyDown:connect(function(k)
		if _G.infinjump then
			if k:byte() == 32 then
			humanoid = game:GetService'Players'.LocalPlayer.Character:FindFirstChildOfClass('Humanoid')
			humanoid:ChangeState('Jumping')
			wait()
			humanoid:ChangeState('Seated')
			end
		end
	end)
end
                
        end
    })






local Section = Tabs.Player:AddSection("Teleports")


local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local Dropdown
local function updatePlayerDropdown()
    local players = {"None"} -- Add "None" as the first option
    for _, p in pairs(game.Players:GetPlayers()) do
        if p ~= player then -- Exclude the local player
            table.insert(players, p.Name)
        end
    end

    if Dropdown then
        Dropdown.Values = players
        Dropdown:SetValue("None") -- Default to "None"
    end
end

Dropdown = Tabs.Player:AddDropdown("TeleportToPlayerDropdown", {
    Title = "Teleport to Player",
    Values = {}, -- Start empty
    Multi = false,
})

Dropdown:OnChanged(function(playerName)
    if playerName == "None" then
        
        -- Optionally teleport to current position
        -- character:SetPrimaryPartCFrame(character.PrimaryPart.CFrame)
    elseif playerName and playerName ~= "" then
        local targetPlayer = game.Players:FindFirstChild(playerName)
        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            character:SetPrimaryPartCFrame(targetPlayer.Character.HumanoidRootPart.CFrame)
        else
            
        end
    else
        
    end
end)

game.Players.PlayerAdded:Connect(updatePlayerDropdown)
game.Players.PlayerRemoving:Connect(updatePlayerDropdown)

updatePlayerDropdown()



local Section = Tabs.Player:AddSection("Troll") 

local RunService = game:GetService("RunService")

-- Function to teleport and sit on the closest player's head
local function teleportAndSitOnHead()
    local localPlayer = game.Players.LocalPlayer
    local closestPlayer = nil
    local shortestDistance = math.huge  -- Set to a very large number initially

    -- Loop through all players and find the closest one
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local head = player.Character.Head
            local distance = (localPlayer.Character.HumanoidRootPart.Position - head.Position).Magnitude
            
            -- Check if this player is closer
            if distance < shortestDistance then
                shortestDistance = distance
                closestPlayer = player
            end
        end
    end

    -- If a closest player is found, teleport the local player to their head and sit
    if closestPlayer then
        local closestHead = closestPlayer.Character.Head
        localPlayer.Character:SetPrimaryPartCFrame(CFrame.new(closestHead.Position + Vector3.new(0, 3, 0)))  -- Adjust for sitting

        -- Make the local player sit on the head
        local humanoid = localPlayer.Character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.Sit = true
        end
    else

    end
end

-- Variable to track whether the feature is enabled or not
local isEnabled = false

-- Add a Fluent UI toggle button to enable/disable the feature
local Toggle = Tabs.Player:AddToggle("TeleportAndSitToggle", {
    Title = "Sit on closest persons head", 
    Description = "",
    Default = false, 
    Callback = function(state)
        isEnabled = state
        if isEnabled then

            -- Execute teleport and sit function when enabled
            RunService.Heartbeat:Connect(function()
                if isEnabled then
                    teleportAndSitOnHead()
                end
            end)
        else

        end
    end
})










local Section = Tabs.Player:AddSection("Misc")

    
Tabs.Player:AddButton({
    Title = "Rejoin Server",
    Description = "Use this when sliders dont work",
    Callback = function()
        local player = game.Players.LocalPlayer

        
        wait(1.5)
        player:Kick("Rejoining...")
        wait(1)
        game:GetService("TeleportService"):Teleport(game.PlaceId, player)
    end
})


 Tabs.Player:AddButton({
    Title = "Load Pawn AD Version",
    Description = "",
    Callback = function()
         loadstring(game:HttpGet("https://raw.githubusercontent.com/Winxty/Pawn-hub/refs/heads/main/Pawn/AD"))() 
    end
})   



    
local Section = Tabs.Player:AddSection("Infinite Yield")

Tabs.Player:AddButton({
    Title = "Load Infinite Yield",
    Description = "",
    Callback = function()
        loadstring(game:HttpGet(('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'),true))()
    end
})


    -- Hand the library over to our managers
    SaveManager:SetLibrary(Fluent)
    InterfaceManager:SetLibrary(Fluent)

    -- Ignore keys that are used by ThemeManager.
    -- (we don't want configs to save themes, do we?)
    SaveManager:IgnoreThemeSettings()

    -- You can add indexes of elements the save manager should ignore
    SaveManager:SetIgnoreIndexes({})

    -- Interface manager and save manager folder setup
    InterfaceManager:SetFolder("FluentScriptHub")
    SaveManager:SetFolder("FluentScriptHub/specific-game")

    InterfaceManager:BuildInterfaceSection(Tabs.Settings)
    SaveManager:BuildConfigSection(Tabs.Settings)

    -- Select the first tab by default
    Window:SelectTab(1)

    Fluent:Notify({
        Title = "Pawn",
        Content = "The Script Was Loaded With No Errors!",
        Duration = 8
    })

Fluent:Notify({
        Title = "Game is not supported",
        Content = "Loaded Universal",
        SubContent = "🌐",
        Duration = 5
})

    -- Use SaveManager to load an auto-loaded config
    SaveManager:LoadAutoloadConfig()
end
