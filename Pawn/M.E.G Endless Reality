print("Sigma")

local MarketplaceService = game:GetService("MarketplaceService")
local GameName = Instance.new("StringValue")
GameName.Name = "GameName"
GameName.Value = MarketplaceService:GetProductInfo(game.PlaceId).Name
GameName.Parent = game.Workspace

if GameName.Value == "M.E.G. Endless Reality" then
  GameName.Value = "Lobby"
end



local DisplayName = game.Players.LocalPlayer.DisplayName
print("Display found")
print(DisplayName)


local PlayerName = game.Players.LocalPlayer.Name
print("User found")
print(PlayerName)




local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Pawn Script [Free]",
    SubTitle = GameName.Value .. " ( M.E.G. Endless Reality )",
    TabWidth = 130,
    Size = UDim2.fromOffset(700, 520),
    Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.K -- Used when theres no MinimizeKeybind
})

-- Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "play" }),
    Player = Window:AddTab({ Title = "Player", Icon = "person-standing" }),
    ESP = Window:AddTab({ Title = "Esp", Icon = "eye" }),
    Misc = Window:AddTab({ Title = "Miscellaneous", Icon = "shuffle" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

;local bb=game:service'VirtualUser'
game:service'Players'.LocalPlayer.Idled:connect(function()
bb:CaptureController()bb:ClickButton2(Vector2.new())
ab.Text="Roblox tried kicking you buy I didnt let them!"wait(2)ab.Text="Status : Active"end)

local Options = Fluent.Options

do





-- << Main tab >> --

Fluent:Notify({
        Title = "Pawn Is Loading",
        Content = "This Wont Take Long",
        SubContent = "âž¡",
        Duration = 5
})




Tabs.Main:AddParagraph({
    Title = "Welcome " .. DisplayName .. "!",
    Content = "User: " .. PlayerName,
})

Tabs.Main:AddParagraph({
    Title = "Changelog",
    Content = "Added Gui."
})




-- << Player tab >> --




local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()

-- Function to update the Character reference
local function UpdateCharacter()
    Character = Player.Character or Player.CharacterAdded:Wait()
end

-- Listen for respawn and update Character
Player.CharacterAdded:Connect(UpdateCharacter)

-- Slider
local Slider = Tabs.Player:AddSlider("Slider", {
    Title = "WalkSpeed",
    Description = "",
    Default = 16,
    Min = 16,
    Max = 500,
    Rounding = 1,
    Callback = function(Value)
        if Character and Character:FindFirstChild("Humanoid") then
            Character.Humanoid.WalkSpeed = Value
        end
    end
})


    
Tabs.Player:AddButton({
        Title = "Infinite jump",
        Description = "Lets you jump infintely what else",
        Callback = function()


    --Toggles the infinite jump between on or off on every script run
_G.infinjump = not _G.infinjump

if _G.infinJumpStarted == nil then
	--Ensures this only runs once to save resources
	_G.infinJumpStarted = true
	

	--The actual infinite jump
	local plr = game:GetService('Players').LocalPlayer
	local m = plr:GetMouse()
	m.KeyDown:connect(function(k)
		if _G.infinjump then
			if k:byte() == 32 then
			humanoid = game:GetService'Players'.LocalPlayer.Character:FindFirstChildOfClass('Humanoid')
			humanoid:ChangeState('Jumping')
			wait()
			humanoid:ChangeState('Seated')
			end
		end
	end)
end
                
        end
    })





-- << ESP Tab >> --

    

local entity = game.Workspace.NPCS
local EspOn = false
local RunService = game:GetService("RunService")
local espParts = {} -- Store ESP parts for easy tracking

local Toggle = Tabs.ESP:AddToggle("MyToggle", 
{
    Title = "ESP Entities", 
    Description = "",
    Default = false,
    Callback = function(state)
        EspOn = state

        if EspOn then
            -- Continuously check for new or respawned NPCs
            RunService.Heartbeat:Connect(function()
                for _, npc in pairs(entity:GetChildren()) do
                    if npc:IsA("Model") then
                        local head = npc:FindFirstChild("Head") or npc:FindFirstChild("HumanoidRootPart")
                        if head then
                            -- If NPC has no ESP, create one
                            if not espParts[npc] then
                                local billboard = Instance.new("BillboardGui")
                                billboard.Parent = npc
                                billboard.Adornee = head
                                billboard.Size = UDim2.new(0, 15, 0, 15) -- Set size of the ESP part
                                billboard.StudsOffset = Vector3.new(0, 5, 0) -- Float above the NPC
                                billboard.AlwaysOnTop = true -- Always visible
                                billboard.MaxDistance = 10000 -- Max render distance

                                -- Create a part inside the BillboardGui (acts as the ESP part)
                                local espPart = Instance.new("Frame")
                                espPart.Size = UDim2.new(1, 0, 1, 0)
                                espPart.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red color
                                espPart.BackgroundTransparency = 0.5 -- Semi-transparent
                                espPart.Parent = billboard

                                -- Store the billboard for easy access
                                espParts[npc] = {billboard = billboard, head = head}
                            end
                        end
                    end
                end

                -- Continuously update the ESP positions
                for npc, data in pairs(espParts) do
                    if npc and data.billboard and data.head then
                        -- Update the position of the BillboardGui
                        data.billboard.StudsOffset = Vector3.new(0, 5, 0) -- Keep it 5 studs above the head
                    end
                end
            end)
        else
            -- Remove all ESP parts when ESP is disabled
            for _, data in pairs(espParts) do
                if data.billboard then
                    data.billboard:Destroy()
                    data.billboard.Enabled = false
                end
            end
            espParts = {} -- Clear the table that tracks ESP parts
        end
    end
})

















    

-- << Misc tab >> --

local char = game.Players.LocalPlayer.Character

local Toggle = Tabs.Misc:AddToggle("MyToggle", 
{
    Title = "Disable Camera Bobbing", 
    Description = "",
    Default = false,
    Callback = function(state)
	if state then
	    char.CameraBobbing.Enabled = false
        char.CameraBobbingA.Enabled = false
	else
	    char.CameraBobbing.Enabled = true
        char.CameraBobbingA.Enabled = true
        end
    end 
})

local Toggle = Tabs.Misc:AddToggle("MyToggle", 
{
    Title = "Hide Arms", 
    Description = "",
    Default = false,
    Callback = function(state)
	if state then
	    char.Arms.Enabled = false
	else
	    char.Arms.Enabled = true
        end
    end 
})




    
local Section = Tabs.Misc:AddSection("Infinite Yield")

Tabs.Misc:AddButton({
    Title = "Load Infinite Yield",
    Description = "",
    Callback = function()
        loadstring(game:HttpGet(('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'),true))()
    end
})


    -- Hand the library over to our managers
    SaveManager:SetLibrary(Fluent)
    InterfaceManager:SetLibrary(Fluent)

    -- Ignore keys that are used by ThemeManager.
    -- (we don't want configs to save themes, do we?)
    SaveManager:IgnoreThemeSettings()

    -- You can add indexes of elements the save manager should ignore
    SaveManager:SetIgnoreIndexes({})

    -- Interface manager and save manager folder setup
    InterfaceManager:SetFolder("FluentScriptHub")
    SaveManager:SetFolder("FluentScriptHub/specific-game")

    InterfaceManager:BuildInterfaceSection(Tabs.Settings)
    SaveManager:BuildConfigSection(Tabs.Settings)

    -- Select the first tab by default
    Window:SelectTab(1)

    Fluent:Notify({
        Title = "Pawn",
        Content = "The Script Was Loaded With No Errors!",
        Duration = 8
    })

    -- Use SaveManager to load an auto-loaded config
    SaveManager:LoadAutoloadConfig()
end
